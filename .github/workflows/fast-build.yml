name: Fast Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "ÁâàÊú¨Âè∑ (ÁïôÁ©∫ÂàôËá™Âä®Ëé∑Âèñ)"
        required: false
        type: string
      skip_tests:
        description: "Ë∑≥ËøáÊµãËØï‰ª•Âä†Âø´ÊûÑÂª∫"
        required: false
        default: true
        type: boolean
  push:
    branches:
      - main
      - master
    paths:
      - "src/**"
      - "src-tauri/**"
      - "package.json"

permissions: write-all

jobs:
  fast-build:
    runs-on: windows-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true
          shared-key: "fast-build"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Node.js Cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-fast-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-fast-
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline
          pnpm check x86_64-pc-windows-msvc

      - name: Fast Build (Dev Profile)
        timeout-minutes: 20
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          RUST_BACKTRACE: "0"
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        run: |
          pnpm run web:build
          cd src-tauri
          cargo build --target x86_64-pc-windows-msvc --profile dev

      - name: Get Version
        id: version
        shell: pwsh
        run: |
          if ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = (Get-Content package.json | ConvertFrom-Json).version
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "BUILD_TIME=$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> $env:GITHUB_OUTPUT

      - name: Create Fast Build Package
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.VERSION }}"
          $buildTime = "${{ steps.version.outputs.BUILD_TIME }}"

          # Create output directory
          New-Item -ItemType Directory -Path "fast-build-output" -Force

          # Copy executable
          $exePath = "src-tauri\target\x86_64-pc-windows-msvc\debug\clash-verge.exe"
          if (Test-Path $exePath) {
            Copy-Item $exePath "fast-build-output\Clash-Verge-Rev-FastBuild.exe"
            Write-Host "‚úÖ Fast build completed successfully!"
            Write-Host "üìÅ Build output: fast-build-output/Clash-Verge-Rev-FastBuild.exe"
          } else {
            Write-Host "‚ùå Build failed - executable not found"
            exit 1
          }

          # Create simple README
          $readmeContent = "# Clash Verge Rev - Fast Build`n`n"
          $readmeContent += "‚ö° This is a fast development build for testing purposes.`n`n"
          $readmeContent += "Version: $version`n"
          $readmeContent += "Build Time: $buildTime`n"
          $readmeContent += "Build Type: Debug (Fast)`n`n"
          $readmeContent += "‚ö†Ô∏è Warning: This is a debug build and not optimized for production use.`n"
          Set-Content -Path "fast-build-output\README.txt" -Value $readmeContent -Encoding UTF8

      - name: Upload Fast Build
        uses: actions/upload-artifact@v4
        with:
          name: clash-verge-rev-fast-build-v${{ steps.version.outputs.VERSION }}
          path: fast-build-output/*
          retention-days: 7
          if-no-files-found: error
